class Solution {
    public static boolean hasPath(List<List<Integer>> g, int src, int dest, boolean seen[]){
        if(src == dest) return true;
        seen[src] = true;
        for(int n : g.get(src)){
            if(!seen[n] && hasPath(g, n, dest, seen)){
                return true;
            }
        }
        return false;
    }
        public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        List<List<Integer>> g = new ArrayList<>();

        for(int i=0; i<=n; i++){
            g.add(new ArrayList<>());
        }
        for(int e[]: edges){
            int v= e[0], u= e[1];
            boolean seen[] = new boolean[n+1];
            if(hasPath(g, v,u,seen)){
                return e;
            }
            g.get(v).add(u);
            g.get(u).add(v);
        }
        return new int[0];
    }
}
