class Solution {
    class Pair{
        int a;
        int b;
        int cost;
        Pair(int a, int b, int c){
            this.a =a;
            this.b= b;
            this.cost =c;
        }
    }
    public boolean check(int r,int c,int n,int seen[][]){
        if(r<0 || c<0 || r>=n || c>=n || seen[r][c] ==1){
            return false;
        }
        return true;
    }
    int seen[][];
    public int swimInWater(int[][] grid) {
        int n = grid.length;
        seen = new int[n][n];
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->(a.cost-b.cost));
        pq.offer(new Pair(0,0,grid[0][0]));
        int dr[] = {-1,1,0,0};
        int dc[] = {0,0,-1,1};
        seen[0][0]=1;
        while(!pq.isEmpty()){
            Pair curr = pq.poll();
            int i =curr.a;
            int j = curr.b;
            int cost = curr.cost;
            if(i==n-1 && j==n-1){
                return cost;
            }
            for(int k=0; k<4; k++){
                int nr = i+dr[k];
                int nc = j+dc[k];
                if(check(nr,nc,n,seen)){
                    int min = Math.max(cost, grid[nr][nc]);
                    pq.offer(new Pair(nr,nc,min));
                    seen[nr][nc] = 1;
                }
            }
        }
        return 0;
    }
}
