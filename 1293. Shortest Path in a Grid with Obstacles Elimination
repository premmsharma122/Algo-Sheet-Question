class Solution {
    public int shortestPath(int[][] grid, int k) {
        int m = grid.length , n= grid[0].length;
        boolean seen[][][] = new boolean[m][n][k+1];
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0,0,k});
        int res= 0;

        while(q.size()>0){
            int s = q.size();
            while(s-->0){
                int arr[] = q.poll();
                int x = arr[0];
                int y = arr[1];
                int obs = arr[2];
                if(x==m-1 && y==n-1 && obs >=0) return res;
                if(obs <0 || seen[x][y][obs] == true) continue;
                seen[x][y][obs] = true;

                if(x-1 >=0){
                    q.add(new int[]{x-1,y,obs-grid[x-1][y]});
                }
                if(x+1 <m){
                    q.add(new int[]{x+1,y, obs- grid[x+1][y]});
                }
                if(y-1 >=0){
                    q.add(new int[]{x,y-1,obs-grid[x][y-1]});
                }
                if(y+1 < n){
                    q.add(new int[]{x,y+1,obs-grid[x][y+1]});
                }
            }
            ++res;
        }
        return -1;
    }
}
