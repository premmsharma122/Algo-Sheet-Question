class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        // int c=0;
        // for(int i=0; i<heights.length; i++){
        //     if(i+1 < heights.length && heights[i+1]<=heights[i]){
        //         c++;
        //     }else if(i+1 < heights.length && heights[i+1] > heights[i]){
        //         int updateBrick = bricks - (heights[i+1] - heights[i]);
        //         if(updateBrick >= 0){
        //             bricks-=heights[i+1] - heights[i];
        //             c++;
        //         }else if(ladders > 0){
        //             ladders--;
        //             c++;
        //         }
        //     }
        // }
        // return c;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i=0; i<heights.length-1; i++){
            int diff = heights[i+1] - heights[i];
            if(diff>0){
                pq.add(diff);
                if(pq.size()>ladders){
                    bricks -= pq.poll();
                }
                if(bricks < 0) return i;
            }
        }
        return heights.length-1;
    }
}
