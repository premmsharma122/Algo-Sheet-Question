class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int k= nums.size();
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a->a[0]));
        int max = Integer.MIN_VALUE;
        for(int i=0; i<k; i++){
            pq.add(new int[]{nums.get(i).get(0),i,0});
            max = Math.max(max,nums.get(i).get(0));
        }
        int rangeSt =0, rangeEd = Integer.MAX_VALUE;
        while(pq.size() == k){
            int curr[] = pq.poll();
            int min = curr[0], row = curr[1], col = curr[2];
            if(max - min < rangeEd - rangeSt){
                rangeSt = min;
                rangeEd = max;
            }
            if(col + 1 < nums.get(row).size()){
                int nextval = nums.get(row).get(col+1);
                pq.add(new int[]{nextval, row,col+1});
                max = Math.max(max, nextval);
            }else{
                break;
            }
        }
        return new int[]{rangeSt, rangeEd};
    }
}
