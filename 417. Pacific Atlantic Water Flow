class Solution {
    public void dfs(boolean seen[][], int h[][], int r, int c, int prev){
        if(r<0 || c<0 || r>=h.length || c>=h[0].length) return;
        if(h[r][c] < prev) return;
        if(seen[r][c]) return;
        seen[r][c] = true;
        dfs(seen, h, r+1, c, h[r][c]);
        dfs(seen, h, r-1, c, h[r][c]);
        dfs(seen, h, r, c+1, h[r][c]);
        dfs(seen, h, r, c-1, h[r][c]);
    }
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        int n = heights.length; // row
        int m = heights[0].length; // col
        boolean seenP[][] = new boolean[n][m];
        boolean seenA[][] = new boolean[n][m];
        List<List<Integer>> ans = new ArrayList();

        for(int i=0; i<n; i++){ // col -> left and right
           for(int j=0; j<m; j++){
            if(i==0 || j==0) dfs(seenP, heights, i,j,0);
            if(i==n-1 || j == m-1) dfs(seenA , heights, i,j,0);
           }
        }
        //check
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(seenP[i][j] && seenA[i][j]){
                    ans.add(Arrays.asList(i,j));
                }
            }
        }
        return ans;
    }
}
