class Solution {
    class Edge{
        int src;
        double pro;
        Edge(int s, double p){
            this.src = s;
            this.pro =p;
        }
    }
    class Pair{
        int n;
        double pro;
        Pair(int n , double p){
            this.n = n;
            this.pro = p;
        }
    }
    public double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
        ArrayList<Edge>[] g = new ArrayList[n];
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->Double.compare(b.pro,a.pro));
        boolean seen[] = new boolean[n];
        for(int i=0; i<n; i++){
            g[i] = new ArrayList<>();
        }
        for(int i=0; i<edges.length; i++){
            int src = edges[i][0];
            int v = edges[i][1];
            double pro = succProb[i];
            g[src].add(new Edge(v, pro));
            g[v].add(new Edge(src, pro));
        }
        double dist[] = new double[n];
        dist[start_node] = 1.0;
        pq.add(new Pair(start_node,1.0));
        int max =0;
        while(!pq.isEmpty()){
            Pair curr = pq.remove();
            int node = curr.n;
            double currPro = curr.pro;
            if(node == end_node) return currPro;
            for(int i=0; i<g[curr.n].size(); i++){
                    Edge e = g[curr.n].get(i);
                    double newPro = currPro * e.pro;
                    int des = e.src;
                    if(newPro > dist[e.src]){
                        dist[e.src] = newPro;
                        pq.add(new Pair(des , newPro));
                    }            
            }
            
        }
        return 0;
    }
}
