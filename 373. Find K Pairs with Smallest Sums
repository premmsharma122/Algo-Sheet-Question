class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        // List<List<Integer>> arr = new ArrayList<>();

        // PriorityQueue<int[]> pq = new PriorityQueue<>(
        //     (a, b) -> (b[0] + b[1]) - (a[0] + a[1]) // max-heap
        // );

        // for (int i = 0; i < nums1.length; i++) {
        //     for (int j = 0; j < nums2.length; j++) {
        //         pq.add(new int[]{nums1[i], nums2[j]});
        //         if (pq.size() > k) {
        //             pq.poll(); 
        //         }
        //     }
        // }

        // while (!pq.isEmpty()) {
        //  int[] pair = pq.poll();
        //  arr.add(Arrays.asList(pair[0], pair[1]));
        // }

        // return arr;
        List<List<Integer>> arr = new ArrayList<>();
         PriorityQueue<int[]> pq = new PriorityQueue<>(
            (a, b) -> (nums1[a[0]] + nums2[a[1]]) - (nums1[b[0]] + nums2[b[1]])
        );
        for(int i=0; i<Math.min(k, nums1.length); i++){
            pq.offer(new int[]{i,0});
        }
        while(k-- > 0 && !pq.isEmpty()){
            int idx[] = pq.poll();
            int i= idx[0], j= idx[1];
            arr.add(Arrays.asList(nums1[i], nums2[j]));
            if(j+1 < nums2.length){
                pq.add(new int[]{i, j+1});
            }
        }
        return arr;
    }
}
