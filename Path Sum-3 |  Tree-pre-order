// facing Difficulty to solve this question it take a extra self main function call which leads me to face errors.
// Ist Approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int pSum(TreeNode r, int t, long sum){
        if(r==null) return 0;
        sum+=r.val;
        int count=0;
         if(sum==t) {
            count++;
        }
        count+= pSum(r.left, t, sum);
        count+= pSum(r.right, t, sum);
        return count;
        
    }
    public int pathSum(TreeNode root, int targetSum) {
        if(root == null) return 0;
        int currPath = pSum(root, targetSum,0);
        int leftPath = pathSum(root.left, targetSum);
        int rightPath = pathSum(root.right, targetSum);
        return currPath + leftPath + rightPath;
    }
}
// 2nd Approach by an arraylist->
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */import java.util.ArrayList;
import java.util.List;

class Solution {
    int c = 0;

    public void help(TreeNode r, long t, List<Long> arr) {
        if (r == null) return;

        arr.add((long) r.val);
        long sum = 0;

        for (int i = arr.size() - 1; i >= 0; i--) {
            sum += arr.get(i);
            if (sum == t) c++;
        }

        help(r.left, t, arr);
        help(r.right, t, arr);
        arr.remove(arr.size() - 1);
    }

    public int pathSum(TreeNode root, int targetSum) {
        c = 0;
        List<Long> arr = new ArrayList<>();
        help(root, targetSum, arr);
        return c;
    }
}




