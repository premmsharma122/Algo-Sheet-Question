import java.util.*;

class Solution {
    public int[][] merge(int[][] intervals) {
        // // Edge case: only one interval
        // if (intervals.length <= 1) return intervals;

        // List<int[]> arr = new ArrayList<>();
        // boolean[] f = new boolean[intervals.length];

        // for (int i = 0; i < intervals.length; i++) {
        //     for (int j = 0; j < intervals.length; j++) {
        //         if (i == j) continue;
        //         if(intervals[j][0] < intervals[i][0]){
        //             arr.add(new int[]{intervals[j]});
        //         }
        //         if (!f[j] && intervals[i][0] <= intervals[j][0] && intervals[i][1] >= intervals[j][0]) {
        //             arr.add(new int[]{intervals[i][0], Math.max(intervals[i][1], intervals[j][1])});
        //             f[j] = true;
        //             f[i] = true;
        //             break;
        //         }
        //     }
        //     if (!f[i]) {
        //         arr.add(intervals[i]);
        //         f[i] = true;
        //     }
        // }

        // int[][] ans = new int[arr.size()][2];
        // for (int i = 0; i < arr.size(); i++) {
        //     ans[i] = arr.get(i);
        // }

        // return ans;
        if(intervals.length <=1) return intervals;
        Arrays.sort(intervals, (a,b)-> a[0]-b[0]);
        List<int[]> ans = new ArrayList<>();
        int curr[] = intervals[0];
        for(int i=1; i<intervals.length; i++){
            if(curr[1]>= intervals[i][0]){
                curr[1] = Math.max(curr[1],intervals[i][1]);
            }else{
                ans.add(curr);
                curr = intervals[i];
            }
           
        }
         ans.add(curr);
        return ans.toArray(new int[ans.size()][]);

    }
}
