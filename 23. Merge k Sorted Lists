/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    //short trick
    public ListNode mergeKLists(ListNode[] lists) {
        List<Integer> arr = new ArrayList<>();
        for (int i = 0; i < lists.length; i++) {
        ListNode current = lists[i];
        while (current != null) {
            arr.add(current.val);
            current = current.next;
            }
        }
        Collections.sort(arr);
        if(arr.size()>0){
        ListNode r = new ListNode(arr.get(0));
        ListNode dummy = r;
        for(int i=1; i<arr.size(); i++){
            dummy.next = new ListNode(arr.get(i));
            dummy = dummy.next;
        }
        return r;
        }
        return null;
    }
}
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // Main Logic
        if (lists == null || lists.length == 0) return null;

        PriorityQueue<ListNode> pq = new PriorityQueue<>(lists.length, new Comparator<ListNode>() {
            @Override
            public int compare(ListNode a, ListNode b) {
                return a.val - b.val;
            }
        });

        
        for (ListNode node : lists) {
            if (node != null) pq.add(node);
        }

        
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        
        while (!pq.isEmpty()) {
            ListNode smallest = pq.poll();
            tail.next = smallest;
            tail = tail.next;

            if (smallest.next != null) {
                pq.add(smallest.next);
            }
        }

        return dummy.next;
    }
}
